import boto3
import json

def summarize_news_with_claude(
    news_headlines, 
    model_id="us.anthropic.claude-3-5-sonnet-20241022-v2:0", 
    temperature=0.7,
    max_tokens=64
):
    """
    Uses Amazon Bedrock API to call the Claude model and generate a crisp summary
    of provided news headlines.
    
    Parameters:
      - news_headlines: List of news headline strings.
      - model_id: The model identifier for the Claude model on Bedrock.
      - temperature: The sampling temperature for generation.
      - max_tokens: Maximum number of tokens to sample in the output summary.
      
    Returns:
      A summary string generated by Claude.
    """
    try:
        # print(f"[DEBUG] Creating boto3 client for 'bedrock-runtime' with region 'us-east-1'.")
        client = boto3.client('bedrock-runtime', region_name='us-east-1')
    except Exception as err:
        print(f"[ERROR] Failed to create boto3 client: {err}")
        raise
        
    # Combine news headlines into a single prompt
    combined_news = "\n".join(news_headlines)
    prompt = (
        "Below are news headlines related to a stock. "
        "Generate a concise, insightful, one-liner summary that an experienced stock market analyst would appreciate:\n"
        f"{combined_news}\nSummary:"
    )
    # print(f"[DEBUG] Invoking model '{model_id}' with prompt:\n{prompt}")
    
    payload = {
        "prompt": prompt,
        "temperature": temperature,
        "max_tokens_to_sample": max_tokens
    }

    # Prepare parameters with expected lowercase keys.
    params = {
        "modelId": model_id,
        "body": json.dumps(payload),
        "contentType": "application/json",
        "accept": "application/json"
    }

    print(f"[DEBUG] Parameters for invoke_model: {params}")

    try:
        # Using dictionary expansion to pass parameters.
        response = client.invoke_model(**params)
        print("[DEBUG] Received response from Bedrock.")
    except Exception as err:
        print(f"[ERROR] Failed to invoke model: {err}")
        raise

    try:
        result = response["Body"].read()
        result_dict = json.loads(result)
        summary = result_dict.get("completion", "No summary provided.")
        print(f"[DEBUG] Claude summary: {summary.strip()}")
        return summary.strip()
    except Exception as err:
        print(f"[ERROR] Could not parse response: {err}")
        raise 